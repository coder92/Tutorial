Spring Core    
    {
        //XML File
            <?xml version="1.0" encoding="UTF-8"?>
            <beans xmlns="http://www.springframework.org/schema/beans"
                xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
                xmlns:context="http://www.springframework.org/schema/context"
                xsi:schemaLocation="http://www.springframework.org/schema/beans
                http://www.springframework.org/schema/beans/spring-beans.xsd
                http://www.springframework.org/schema/context
                http://www.springframework.org/schema/context/spring-context.xsd">

                <!-- Define your beans here -->
                <bean id="myFortuneService"
                        class="com.luv2code.springdemo.HappyFortuneService"
                        init-method="doMyStartupStuff" 
                        destroy-method="doMyCleanupStuff">
                    </bean>
                
                <bean id="myCoach"
                    class="com.luv2code.springdemo.TrackCoach">	 
                    <!-- set up constructor injection -->
                    <constructor-arg ref="myFortuneService" />		
                </bean>

                <bean id="myCricketCoach"
                    class="com.luv2code.springdemo.CricketCoach"> 
                    
                    <!-- set up setter injection -->
                    <property name="fortuneService" ref="myFortuneService" />

                    <!-- inject literal values -->
                    <property name="emailAddress" value="thebestcoach@luv2code.com" />
                    <property name="team" value="Sunrisers Hyderabad" />

                    <!-- inject literal values from property file -->   
                    <property name="emailAddress" value="${foo.email}" />
                    <property name="team" value="${foo.team}" />
                </bean>
            </beans>


        //load the spring configuration file
            ClassPathXmlApplicationContext context = 
                                    new ClassPathXmlApplicationContext("applicationContext.xml");

        //retrieve bean from spring container
                Coach theCoach = context.getBean("myCoach", Coach.class);


        //Scope
            singleton : Create a single shared instance of the bean. Default scope.
            prototype : Creates a new bean instance for each container request.
            request : Scoped to an HTTP web request. Only used for web apps.
            session : Scoped to an HTTP web session. Only used for web apps.
            global-session : Scoped to a global HTTP web session. Only used for web
            apps.
        //Life-Cycle
            Container Started -> Dependencies Injected ->  Bean Instantiated -> Internal Spring Processing ->
            Your Custom Init Method -> Bean Is Ready For Use -> Container Is Shutdown -> Your Custom Destroy Method
        //Annotation
            XML 
                <?xml version="1.0" encoding="UTF-8"?>
                <beans xmlns="http://www.springframework.org/schema/beans"
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
                    xmlns:context="http://www.springframework.org/schema/context"
                    xsi:schemaLocation="http://www.springframework.org/schema/beans
                    http://www.springframework.org/schema/beans/spring-beans.xsd
                    http://www.springframework.org/schema/context
                    http://www.springframework.org/schema/context/spring-context.xsd">

                    <!-- add entry to enable component scanning -->

                    <context:component-scan base-package="com.luv2code.springdemo" />
                </beans>

        Java Configuration
            @Configuration
                @Configuration
                @ComponentScan("com.luv2code.springdemo")
                public class SportConfig {
                } 
            
            AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(SportConfig.class);

            //No Component scan
                @Configuration
                public class SportConfig {
                    @Bean
                    public Coach swimCoach() {
                    SwimCoach mySwimCoach = new SwimCoach();
                    return mySwimCoach;
                    }
                }
    
    }
Spring MVC
{
    XML : spring-mvc-demo-servlet.xml
        {
            <?xml version="1.0" encoding="UTF-8"?>
                <beans xmlns="http://www.springframework.org/schema/beans"
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
                    xmlns:context="http://www.springframework.org/schema/context"
                    xmlns:mvc="http://www.springframework.org/schema/mvc"
                    xsi:schemaLocation="
                        http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context.xsd
                        http://www.springframework.org/schema/mvc
                        http://www.springframework.org/schema/mvc/spring-mvc.xsd">

                    <!-- Step 3: Add support for component scanning -->
                    <context:component-scan base-package="com.luv2code.springdemo" />

                    <!-- Step 4: Add support for conversion, formatting and validation support -->
                    <mvc:annotation-driven/>

                    <!-- Step 5: Define Spring MVC view resolver -->
                    <bean
                        class="org.springframework.web.servlet.view.InternalResourceViewResolver">
                        <property name="prefix" value="/WEB-INF/view/" />
                        <property name="suffix" value=".jsp" />
                    </bean>
                </beans>
        }

    XML: web.xml
        {
            <?xml version="1.0" encoding="UTF-8"?>
            <web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                xmlns="http://xmlns.jcp.org/xml/ns/javaee"
                xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
                id="WebApp_ID" version="3.1">

                <display-name>spring-mvc-demo</display-name>

                <!-- Spring MVC Configs -->

                <!-- Step 1: Configure Spring MVC Dispatcher Servlet -->
                <servlet>
                    <servlet-name>dispatcher</servlet-name>
                    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
                    <init-param>
                        <param-name>contextConfigLocation</param-name>
                        <param-value>/WEB-INF/spring-mvc-demo-servlet.xml</param-value>
                    </init-param>
                    <load-on-startup>1</load-on-startup>
                </servlet>

                <!-- Step 2: Set up URL mapping for Spring MVC Dispatcher Servlet -->
                <servlet-mapping>
                    <servlet-name>dispatcher</servlet-name>
                    <url-pattern>/</url-pattern>
                </servlet-mapping>
            </web-app>
        }
    MVC process 
        {
            1st way: without model object 
                request from browser -> controller -> view page 
                @RequestMapping("/showForm")
                public String showForm() {
                return "helloworld-form";
                }    
            
            2nd way : using model object 
                @RequestMapping("/processFormVersionTwo")
                public String letsShoutDude(HttpServletRequest request, Model model) {
                // read the request parameter from the HTML form
                String theName = request.getParameter("studentName");
                // convert the data to all caps
                theName = theName.toUpperCase();
                // create the message
                String result = "Yo! " + theName;
                // add message to the model
                model.addAttribute("message", result);
                return "helloworld";
                }

                view 
                    <html><body>
                    Hello World of Spring!
                    ...
                    The message: ${message}
                    </body></html>
                    for JSP pages : <%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
            3rd way 
                @RequestMapping("/processFormVersionTwo")
                public String letsShoutDude(
                @RequestParam("studentName") String theName,
                Model model) {
                // now we can use the variable: theName
                }
            Form Tag
                {
                    for using these tag : specify Spring namespace : <%@ taglib prefix="form" uri="http://www.springframework.org/tags/form" %> in the beginning of jsp file
                    
                    form:form main form container
                        {
                            <form:form action="processForm" modelAttribute="student"> // main container
                                <form:select path="country"> //form tags
		                            <form:options items="${student.countryOptions}" />               
                                </form:select>

                                <input type="submit" value="Submit" />
                            </form:form>
                        }
                    form:input text field
                        {
                            <form:form action="processForm" modelAttribute="student">
                                First name: <form:input path="firstName" /><br><br>
                                Last name: <form:input path="lastName" /><br><br>
                                <input type="submit" value="Submit" />
                            </form:form>
                        }
                    form:textarea multi-line text field
                    form:checkbox check box
                        {
                            Linux <form:checkbox path="operatingSystems" value="Linux" />
                            Mac OS <form:checkbox path="operatingSystems" value="Mac OS" />
                            MS Windows <form:checkbox path="operatingSystems" value="MS Window" />
                        }
                    form:radiobutton radio buttons
                        {
                            Java <form:radiobutton path="favoriteLanguage" value="Java" />
                            C# <form:radiobutton path="favoriteLanguage" value="C#" />
                            PHP <form:radiobutton path="favoriteLanguage" value="PHP" />
                            Ruby <form:radiobutton path="favoriteLanguage" value="Ruby" />
                        }
                    form:select drop down list
                        {
                            <form:select path="country"> //value set at this variable
                            <form:option value="Brazil" label="Brazil" />
                            <form:option value="France" label="France" />
                            <form:option value="Germany" label="Germany" />
                            <form:option value="India" label="India" />
                            </form:select>

                            2nd way 
                            <form:select path="country">
                            <form:options items="${student.countryOptions}" />
                            </form:select>

                            example 
                                {
                                    <form:form action="processForm" modelAttribute="student">
	
                                    First name: <form:input path="firstName" />
                                    
                                    <br><br>
                                
                                    Last name: <form:input path="lastName" />
                                    
                                    <br><br>
                                
                                    Country:
                                    
                                    <form:select path="country">
                                    
                                        <form:options items="${student.countryOptions}" />
                                        
                                    </form:select>
                                            
                                    <br><br>
                                
                                    <input type="submit" value="Submit" />
                                
                                </form:form>
                                }
                        }

                }            
        }   
    Validation
        {
            Intro
                {
                    Java Validation APIs supported by Spring 4.0 or higher
                    Java’s standard Bean Validation API (JSR-303/309)
                    Only a specification … vendor independent … portable
                    Hibernate started as an ORM project. They have a fully compliant JSR-303/309 implementation
                    http://www.hibernate.org/validator
                }
            Annotation
                {
                @NotNull Checks that the annotated value is not null
                @Min Must be a number >= value
                @Max Must be a number <= value
                @Size Size must match the given size
                @Pattern Must match a regular expression pattern
                @Future / @Past Date must be in future or past of given date

                @InitBinder : It will pre-process each web request to our controller
                
                }
            Form Validation Required field 
                {
                    Java Code  
                    {
                        //Customer class - model
                        import javax.validation.constraints.NotNull;
                        import javax.validation.constraints.Size;
                        public class Customer {
                            private String firstName;
                            @NotNull(message="is required")
                            @Size(min=1, message="is required")
                            private String lastName;
                            // getter/setter methods
                        }

                        //Controller class
                        @RequestMapping("/processForm")
                        public String processForm(
                                @Valid @ModelAttribute("customer") Customer theCustomer,
                                BindingResult theBindingResult) {
                            
                            System.out.println("Last name: |" + theCustomer.getLastName() + "|");
                            
                            if (theBindingResult.hasErrors()) {
                                return "customer-form";
                            }
                            else {
                                return "customer-confirmation";
                            }
                        }
                    }

                }    
        }
}

SpringBoot
{
    spring boot - pom unknown error - eclipse error
    {
        add this line 
        <maven-jar-plugin.version>3.1.1</maven-jar-plugin.version>    
        in 
        <properties>
            <java.version>1.8</java.version>
            <maven-jar-plugin.version>3.1.1</maven-jar-plugin.version>
	    </properties>
    }
    pom.xml file 
    {
        <?xml version="1.0" encoding="UTF-8"?>
        <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
            <modelVersion>4.0.0</modelVersion>
            <parent>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-parent</artifactId>
                <version>2.1.6.RELEASE</version>
                <relativePath/> <!-- lookup parent from repository -->
            </parent>
            <groupId>com.tutorial</groupId>
            <artifactId>MyTutorial</artifactId>
            <version>0.0.1-SNAPSHOT</version>
            <name>MyTutorial</name>
            <description>Demo project for Spring Boot</description>

            <properties>
                <java.version>1.8</java.version>
                <!-- eclipse pom file error resolver-->
                <maven-jar-plugin.version>3.1.1</maven-jar-plugin.version>
            </properties>

            <dependencies>

            <!-- for starting this as spring app-->
                <dependency>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter</artifactId>
                </dependency>

            <!-- spring test dependency -->
                <dependency>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-test</artifactId>
                    <scope>test</scope>
                </dependency>

            <!-- for automatic reloading -->
                <dependency>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-devtools</artifactId>
                </dependency>

            <!-- for web services like @RestController -->
                <dependency>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-web</artifactId>
                </dependency>

            <!-- for jpa implementation -->    
                <dependency>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-data-jpa</artifactId>
                </dependency>

                <dependency>
                    <groupId>mysql</groupId>
                    <artifactId>mysql-connector-java</artifactId>
                    <scope>runtime</scope>
                </dependency>

                <!-- Spring boot actuator - exposing metrics of spring boot -->
                <dependency>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-actuator</artifactId>
                </dependency>

            </dependencies>

            <!-- plugin for build -->
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.springframework.boot</groupId>
                        <artifactId>spring-boot-maven-plugin</artifactId>
                    </plugin>
                </plugins>
            </build>

        </project>

    }


}

SpringBoot-Actuator 
{
    <!-- Spring boot actuator - exposing metrics of spring boot -->
	<dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-actuator</artifactId>
	</dependency>

        used for checking appication health

        url : localhost:8080/actuator/health 

        possible endpoints 
        {
            /health
            /info
            {
                update application info by updating the application.property file 
                
                info.app.name=MySuperCoolApp
                info.app.description=Acrazyandfunapp,yoohoo!
                info.app.version=1.0.0
            }
            /auditevents
            {
                Audit events for your application


            }
            /beans : List of all beans registered in the Spring application contex
            {

            }
            /mappings : List of all @RequestMapping paths

            full list at - www.luv2code.com/actuator-endpoints
        }

        by-Default only health and info is exposed. 
        for exposing all endpoints 
        update application.property file 
        # Use wildcard "*" to expose all endpoints
        # Can also expose individual endpoints with a comma-delimited list 

        management.endpoints.web.exposure.include=*
    }

    Springboot custom properties
    {
        application.properties
        {
            coach.name = mickey mouse 
        }
        class
        {
            @Value("${coach.name}")
	        private String coachName;
        }
    }

    Database 
    {
        spring boot automatically config the db based on the information available in application.property file

        spring.datasorce.url=jdbc:mysql://localhost:3306/employee_dircetory?useSSL=false&serverTimezone=UTC
        spring.datasorce.username=spring
        spring.datasorce.password=spring

        #www.luv2code.com/spring-boot-props
    }
}

Annotation
{
    @Component
        {
            @Component("thatSillyCoach")
                    public class TennisCoach implements Coach{} 
                    @Component // in this case bean id is tennisCoach
                    public class TennisCoach implements Coach
        }
                
    @Autowired
        {
            @Autowired
            public TennisCoach(FortuneService theFortuneService) {
            fortuneService = theFortuneService;
            }
            
            @Autowired
            public void setFortuneService(FortuneService fortuneService) {
            this.fortuneService = fortuneService;
            }

            @Autowired
            private FortuneService fortuneService;

            error when multiple classes implementing the same interface.
            Caused by: org.springframework.beans.factory.NoUniqueBeanDefinitionException: 
            Solution - using Qualifier - can be used with constructor, setter , field injection
            @Autowired
            @Qualifier("happyFortuneService")
            private FortuneService fortuneService;
        }
    @Qualifier
            @Qualifier("happyFortuneService")
            private FortuneService fortuneService;
    @Scope
        @Component
        @Scope("prototype")
        public class TennisCoach implements Coach {}
    
    @PostConstruct
        @PostConstruct
        public void doMyStartupStuff() { … }
    
    @PreDestroy
        @PreDestroy
        public void doMyCleanupStuff() { … }
    
    @Configuration
        @Configuration
        @ComponentScan("com.luv2code.springdemo")
        public class SportConfig {
        }      

    @Controller : inherits from @Component … supports scanning, use in MVC for making class as controller
        @Controller
        public class HomeController {}
    @RequestMapping("/") 
        {
        can be used in class for mapping the class 
        ex: @RequestMapping("/app01")
            public class FunRestController
        
        @RequestMapping("/")
        public String showMyPage() {return "main-menu";} //main-menu.jsp file in WEB-INF/view directory
    
        }
    
    Validation Annotation Description
        {
            @NotNull Checks that the annotated value is not null
            @Min Must be a number >= value
            @Max Must be a number <= value
            @Size Size must match the given size
            @Pattern Must match a regular expression pattern
            @Future / @Past Date must be in future or past of given date

            @Valid 
            @ModelAttribute
            {
            @Valid @ModelAttribute("customer") Customer theCustomer,
                    BindingResult theBindingResult) 
            }

            @InitBinder : It will pre-process each web request to our controller
            {
                @InitBinder
                public void initBinder(WebDataBinder dataBinder) {
                StringTrimmerEditor stringTrimmerEditor = new StringTrimmerEditor(true);
                dataBinder.registerCustomEditor(String.class, stringTrimmerEditor);
                }
            }
        }
    @RestController
        @RestController
        @RequestMapping("/app01")
        public class FunRestController
    @GetMapping
        @GetMapping("/workout")
        public String workout() { return "do gyming daily";
    @PostMapping
        @PostMapping("/save") : used to handle post request
        public Employee save(@RequestBody Employee employee)
    @PathVariable : used to link with url parameter
        public Employee getEmployeeDetails(@PathVariable int employeeId)
    @DeleteMapping
        @DeleteMapping("/delete/{empId}")
        public String delete(@PathVariable int empId)
    
    @PutMapping("/update")
	    public Employee update(@RequestBody Employee employee)
	
    @Repository
        Info:
            used for specify the class is repository
        Ex:
            @Repository
            public class EmployeeDAOHibernateImpl implements EmployeeDAO
    @Transactional : for 
        @Transactional
	    public List<Employee> findAll()
    @CrossOrigin(origins = "http://localhost:4200")
        @CrossOrigin(origins = "http://localhost:4200")
        public class JavaHomeController 
}

Thymeleaf
{
    difference with JSP 
        JSP can only be used in web features but Thymeleaf could be used in non web based pages like mail response 

    developement step 
        1. add Thymeleaf to maven pom file 
        2. development spring mvc controller
        3. create Thymeleaf template 
        4. 
}

MySQL Online DB 
{
    remotemysql.com
        {
            db : 7oHS2KQxxo  | username - 7oHS2KQxxo  | password - kGD68X9ASD
        }
    https://www.jdoodle.com/compiler-api
    {
        Client ID : 4e5650b7b1ca008ccaa7ae4f256a08b5
        Client Secret : c6eba699a1a1b222ac65429a17844c4098eccf16a824e745eaa495d1b21b0d1e
    }
}

Spring Data
	{
	    JPA Repository  
	}

H2Database
{
     jdbc:h2:mem:testdb
}
Spring-Angular Integration
{
    https://grokonez.com/frontend/angular/how-to-integrate-angular-6-springboot-2-0-restapi-springtoolsuite
}
External properties
{
    external file : -Dspring.config.location = C:\application.properties
}
Active profile
{
    application.properties
    {
        server.port = 8080
        spring.application.name = demoservice
    }
    
    application-dev.properties
    {
        server.port = 9090
        spring.application.name = demoservice
    }
    application-prod.properties
    {
        server.port = 4431
        spring.application.name = demoservice
    }
    
    run with active profile 
    java -jar demo.jar --spring.profiles.active=dev
}
SprintBoot-Logging
{
    Spring Boot uses Apache Commons logging for all internal logging. 
    Spring Boot’s default configurations provides a support for the use of Java Util Logging, Log4j2, and 
    Logback. Using these, we can configure the console logging as well as file logging.
    If you are using Spring Boot Starters, Logback will provide a good support for logging. 
    Besides, Logback also provides a use of good support for Common Logging, Util Logging, Log4J, and SLF4J.

    enable debug log 
        java –jar demo.jar --debug
        application.properties } debug = true
    application.properties
        logging.path = /var/tmp/
        logging.file = /var/tmp/mylog.log
    files will rotate automatically after reaching the size 10 MB.
        logging.level.root = WARN
    Log4J Properties
    {
    	# Define the root logger with appender file
		log4j.rootLogger = DEBUG, FILE
		
		# Define the file appender
		log4j.appender.FILE=org.apache.log4j.FileAppender
		# Set the name of the file
		log4j.appender.FILE.File=C:\\log.out
		
		# Set the immediate flush to true (default)
		log4j.appender.FILE.ImmediateFlush=true
		
		# Set the threshold to debug mode
		log4j.appender.FILE.Threshold=debug
		
		# Set the append to false, overwrite
		log4j.appender.FILE.Append=false
		
		# Define the layout for file appender
		log4j.appender.FILE.layout=org.apache.log4j.PatternLayout
		log4j.appender.FILE.layout.conversionPattern=%m%n
    }
    Logback
    {
        logback.xml
        {
            <?xml version = "1.0" encoding = "UTF-8"?>
            <configuration>
                <root level = "INFO">
                </root>
            </configuration>
        }
        logback.xml
        {
            <?xml version = "1.0" encoding = "UTF-8"?>
            <configuration>
                <appender name = "STDOUT" class = "ch.qos.logback.core.ConsoleAppender"></appender>
                <root level = "INFO">
                    <appender-ref ref = "STDOUT"/> 
                </root>
            </configuration>
        }
        logback.xml
        {
            <?xml version = "1.0" encoding = "UTF-8"?>
            <configuration>
                <appender name = "FILE" class = "ch.qos.logback.core.FileAppender">
                    <File>/var/tmp/mylog.log</File>
                </appender>   
                <root level = "INFO">
                    <appender-ref ref = "FILE"/>
                </root>
            </configuration>
        }
        logback.xml - complete
        {
            <?xml version = "1.0" encoding = "UTF-8"?>
            <configuration>
                <appender name = "STDOUT" class = "ch.qos.logback.core.ConsoleAppender">
                    <encoder>
                        <pattern>[%d{yyyy-MM-dd'T'HH:mm:ss.sss'Z'}] [%C] [%t] [%L] [%-5p] %m%n</pattern>
                    </encoder>
                </appender>
                
                <appender name = "FILE" class = "ch.qos.logback.core.FileAppender">
                    <File>/var/tmp/mylog.log</File>
                    <encoder>
                        <pattern>[%d{yyyy-MM-dd'T'HH:mm:ss.sss'Z'}] [%C] [%t] [%L] [%-5p] %m%n</pattern>
                    </encoder>
                </appender>
                
                <root level = "INFO">
                    <appender-ref ref = "FILE"/>
                    <appender-ref ref = "STDOUT"/> 
                </root>
            </configuration>
        }
        java Code
        {
            @SpringBootApplication
            public class DemoApplication {
            private static final Logger logger = LoggerFactory.getLogger(DemoApplication.class);
            
            public static void main(String[] args) {
                logger.info("this is a info message");
                logger.warn("this is a warn message");
                logger.error("this is a error message");
                SpringApplication.run(DemoApplication.class, args);
            }
            }
        }
    }
}
SpringBoot-Web/Restful web services
{
    pom.xml
    {
        <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>    
        </dependency>
    }
    Annotation
    {
        @RestController
        @RequestMapping(value = "/products")
            public ResponseEntity<Object> getProducts() { }
        @RequestBody Product product
        @PathVariable("id") String id
        @RequestParam
            public ResponseEntity<Object> getProduct(@RequestParam(value = "name", required = false, defaultValue = "honey") String name) {}
        @RequestMapping(value = "/products/{id}", method = RequestMethod.DELETE)
        @RequestMapping(value = "/products/{id}", method = RequestMethod.PUT)
        @RequestMapping(value = "/products", method = RequestMethod.POST)
        @RequestMapping(value = "/products")
    }
}
SpringBoot-Exception Handling
{
    https://www.tutorialspoint.com/spring_boot/spring_boot_exception_handling.htm
    @ControllerAdvice:  is an annotation, to handle the exceptions globally
    @ExceptionHandler is an annotation used to handle the specific exceptions and sending the custom responses to the client.
    
    @ControllerAdvice
    public class ProductExceptionController {}

    public class ProductNotfoundException extends RuntimeException 
    {
        private static final long serialVersionUID = 1L;
    }
    @ExceptionHandler(value = ProductNotfoundException.class)
    public ResponseEntity<Object> exception(ProductNotfoundException exception) {}

    @RequestMapping(value = "/products/{id}", method = RequestMethod.PUT)
    public ResponseEntity<Object> updateProduct() { throw new ProductNotfoundException();}

    @ControllerAdvice
    public class ProductExceptionController {
    @ExceptionHandler(value = ProductNotfoundException.class)
    public ResponseEntity<Object> exception(ProductNotfoundException exception) {
      return new ResponseEntity<>("Product not found", HttpStatus.NOT_FOUND);
    }}
}
SpringBoot-Interceptor
{
    use in two situation
    Before sending the request to the controller
    Before sending the response to the client   

    you need to create @Component class that supports it and it should implement the HandlerInterceptor interface

    preHandle()
    postHandle()
    afterCompletion()

    Code
    {
        @Component
        public class ProductServiceInterceptor implements HandlerInterceptor {
        @Override
        public boolean preHandle(
            HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
            
            return true;
        }
        @Override
        public void postHandle(
            HttpServletRequest request, HttpServletResponse response, Object handler, 
            ModelAndView modelAndView) throws Exception {}
        
        @Override
        public void afterCompletion(HttpServletRequest request, HttpServletResponse response, 
            Object handler, Exception exception) throws Exception {}
        }
    }

    You will have to register this Interceptor with InterceptorRegistry by using WebMvcConfigurerAdapter as shown below
    {
        @Component
        public class ProductServiceInterceptorAppConfig extends WebMvcConfigurerAdapter {
        @Autowired
        ProductServiceInterceptor productServiceInterceptor;

        @Override
        public void addInterceptors(InterceptorRegistry registry) {
            registry.addInterceptor(productServiceInterceptor);
        }
        }
    }

}
SpringBoot-Servlet Filter
{
    A filter is an object used to intercept the HTTP requests and responses of your application. By using filter, we can perform two operations at two instances
        Before sending the request to the controller
        Before sending a response to the client.
    Code
    {
        @Component
        public class SimpleFilter implements Filter {
        @Override
        public void destroy() {}

        @Override
        public void doFilter
            (ServletRequest request, ServletResponse response, FilterChain filterchain) 
            throws IOException, ServletException {
                System.out.println("Remote Host:"+request.getRemoteHost());
                System.out.println("Remote Address:"+request.getRemoteAddr());
                filterchain.doFilter(request, response);
            }

        @Override
        public void init(FilterConfig filterconfig) throws ServletException {}
        }
    }

}
Tomcat port
{
    server.port = 9090
    server.port = 0 // random port
} 
RestTemplate
{
    https://www.tutorialspoint.com/spring_boot/spring_boot_rest_template.htm
    Rest Template is used to create applications that consume RESTful Web Services. You can use the exchange() method to consume the web services for all HTTP methods. The code given below shows how to create Bean for Rest Template to auto wiring the Rest Template object.

    Code
    {
        @RestController
        public class ConsumeWebService {
        @Autowired
        RestTemplate restTemplate;

        @RequestMapping(value = "/template/products")
        public String getProductList() {
            HttpHeaders headers = new HttpHeaders();
            headers.setAccept(Arrays.asList(MediaType.APPLICATION_JSON));
            HttpEntity <String> entity = new HttpEntity<String>(headers);
            
            return restTemplate.exchange("
                http://localhost:8080/products", HttpMethod.GET, entity, String.class).getBody();
        }
        }
    }
    
    Problems - Solutions 
    {
    Spring Security – There is no PasswordEncoder mapped for the id “null”
    	Prior to Spring Security 5.0 the default PasswordEncoder was NoOpPasswordEncoder which required plain text passwords. In Spring Security 5, the default is DelegatingPasswordEncoder, which required Password Storage Format.
    	Solution 1 – Add password storage format, for plain text, add {noop}
    		auth.inMemoryAuthentication()
                .withUser("user").password("{noop}password").roles("USER")
        Solution 2 – User.withDefaultPasswordEncoder() for UserDetailsService
	        @Bean
	    	public UserDetailsService userDetailsService() {
	        User.UserBuilder users = User.withDefaultPasswordEncoder();
	        InMemoryUserDetailsManager manager = new InMemoryUserDetailsManager();
	        manager.createUser(users.username("user").password("password").roles("USER").build());
	        manager.createUser(users.username("admin").password("password").roles("USER", "ADMIN").build());
	        return manager;
	        }
    
    }
}
Spring-Batch
{
	
}
Spring-Eureka
{
	@EnableEurekaServer
	MainClass

	Dependencies
		Eureka Server
		Eureka Discovery Client

		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
		</dependency>

	Server Properties
	{
		server.port=8761
		eureka.client.register-with-eureka=false
		eureka.client.fetch-registry=false
	}
}