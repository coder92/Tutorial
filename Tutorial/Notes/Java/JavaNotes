Keywords 
	Transient
		transient is a Java keyword which marks a member variable not to be serialized when it is persisted to streams of bytes.

Collection
	Collection Interface
		This is the root of the collection hierarchy. A collection represents a group of objects known as its elements. The Java platform doesn’t provide any direct implementations of this interface.
	
	Iterator Interface
		Iterator interface provides methods to iterate over any Collection. We can get iterator instance from a Collection using iterator method. Iterator takes the place of Enumeration in the Java Collections Framework.
	
	Set Interface
		Set is a collection that cannot contain duplicate elements. This interface models the mathematical set abstraction and is used to represent sets, such as the deck of cards.
		HashSet, TreeSet, and LinkedHashSet.
	
	List Interface
		List is an ordered collection and can contain duplicate elements. You can access any element from it’s index. List is more like array with dynamic length. List is one of the most used Collection type. ArrayList and LinkedList are implementation classes of List interface.
		Collections class provide some useful algorithm for List – sort, shuffle, reverse, binarySearch etc. 
	
	Queue Interface
		Queue is a collection used to hold multiple elements prior to processing. Besides basic Collection operations, a Queue provides additional insertion, extraction, and inspection operations.
	
	Dequeue Interface
		A linear collection that supports element insertion and removal at both ends. The name deque is short for “double-ended queue” and is usually pronounced “deck”. Most Deque implementations place no fixed limits on the number of elements they may contain, but this interface supports capacity-restricted deques as well as those with no fixed size limit.
	
	Map Interface
		Java Map is an object that maps keys to values. A map cannot contain duplicate keys: Each key can map to at most one value.
		HashMap, TreeMap, and LinkedHashMap.
	
	ListIterator Interface
		An iterator for lists that allows the programmer to traverse the list in either direction, modify the list during iteration, and obtain the iterator’s current position in the list.
		Java ListIterator has no current element; its cursor position always lies between the element that would be returned by a call to previous() and the element that would be returned by a call to next().
	
	SortedSet Interface
		SortedSet is a Set that maintains its elements in ascending order. Several additional operations are provided to take advantage of the ordering. Sorted sets are used for naturally ordered sets, such as word lists and membership rolls.
	
	SortedMap Interface
		Map that maintains its mappings in ascending key order. This is the Map analog of SortedSet. Sorted maps are used for naturally ordered collections of key/value pairs, such as dictionaries and telephone directories.
	
	Java Collections Classes 
		ArrayList, HashMap and HashSet. 
		Java 1.5 included Concurrent implementations; for example ConcurrentHashMap and CopyOnWriteArrayList. 
		Usually Collection classes are not thread-safe and their iterator is fail-fast. 
	
	HashSet Class
		implementation the Set interface that is backed by a HashMap. 
		It makes no guarantees for iteration order of the set and permits the null element.
	
	TreeSet Class
		A NavigableSet implementation based on a TreeMap. 
		The elements are ordered using their natural ordering, or by a Comparator provided at set creation time, depending on which constructor is used.
		This implementation provides guaranteed log(n) time cost for the basic operations (add, remove and contains).
		Note that the ordering maintained by a set (whether or not an explicit comparator is provided) must be consistent with equals if it is to correctly implement the Set interface. (See Comparable or Comparator for a precise definition of consistent with equals.) This is so because the Set interface is defined in terms of the equals operation, but a TreeSet instance performs all element comparisons using its compareTo (or compare) method, so two elements that are deemed equal by this method are, from the standpoint of the set, equal.
	
	ArrayList Class
		Java ArrayList is the resizable-array implementation of the List interface. 
		Implements all optional list operations, and permits all elements, including null. 
		In addition to implementing the List interface, this class provides methods to manipulate the size of the array that is used internally to store the list.
		(This class is roughly equivalent to Vector, except that it is unsynchronized.)
		The size, isEmpty, get, set, iterator, and listIterator operations run in constant time. 
		The add operation runs in amortized constant time, that is, adding n elements requires O(n) time. 
		All of the other operations run in linear time (roughly speaking). 
		The constant factor is low compared to that for the LinkedList implementation.	
	
	LinkedList Class
		Doubly-linked list implementation of the List and Deque interfaces. Implements all optional list operations, and permits all elements (including null).
		All of the operations perform as could be expected for a doubly-linked list. Operations that index into the list will traverse the list from the beginning or the end, whichever is closer to the specified index.	
	
	HashMap Class
		Hash table based implementation of the Map interface. 
		This implementation provides all of the optional map operations and permits null values and the null key. HashMap class is roughly equivalent to Hashtable, except that it is unsynchronized and permits null. This class makes no guarantees for the order of the map.
		This implementation provides constant-time performance for the basic operations (get and put). It provides constructors to set initial capacity and load factor for the collection.
	
	TreeMap Class
		A Red-Black tree based NavigableMap implementation. The map is sorted according to the natural ordering of its keys, or by a Comparator provided at map creation time, depending on which constructor is used.
		This implementation provides guaranteed log(n) time cost for the containsKey, get, put and remove operations. Algorithms are adaptations of those in Cormen, Leiserson, and Rivest’s Introduction to Algorithms.
		Note that the ordering maintained by a TreeMap, like any sorted map, and whether or not an explicit comparator is provided, must be consistent with equals if this sorted map is to correctly implement the Map interface. (See Comparable or Comparator for a precise definition of consistent with equals.) This is so because the Map interface is defined in terms of the equals operation, but a sorted map performs all key comparisons using its compareTo (or compare) method, so two keys that are deemed equal by this method are, from the standpoint of the sorted map, equal. The behavior of a sorted map is well-defined even if its ordering is inconsistent with equals; it just fails to obey the general contract of the Map interface.
	
	PriorityQueue Class
		Queue processes it’s elements in FIFO order but sometimes we want elements to be processed based on their priority. 
		We can use PriorityQueue in this case and we need to provide a Comparator implementation while instantiation the PriorityQueue. 
		PriorityQueue doesn’t allow null values and it’s unbounded.
	
	Collections class
		Java Collections class consists exclusively of static methods that operate on or return collections. It contains polymorphic algorithms that operate on collections, “wrappers”, which return a new collection backed by a specified collection, and a few other odds and ends.
		This class contains methods for collection framework algorithms, such as binary search, sorting, shuffling, reverse etc.
	
	Synchronized Wrappers
		The synchronization wrappers add automatic synchronization (thread-safety) to an arbitrary collection. Each of the six core collection interfaces — Collection, Set, List, Map, SortedSet, and SortedMap — has one static factory method.
		Each of these methods returns a synchronized (thread-safe) Collection backed up by the specified collection.
	
	Unmodifiable wrappers
		Unmodifiable wrappers take away the ability to modify the collection by intercepting all the operations that would modify the collection and throwing an UnsupportedOperationException. It’s main usage are;
		To make a collection immutable once it has been built. In this case, it’s good practice not to maintain a reference to the backing collection. This absolutely guarantees immutability.
		To allow certain clients read-only access to your data structures. You keep a reference to the backing collection but hand out a reference to the wrapper. In this way, clients can look but not modify, while you maintain full access.
	
	Thread Safe Collections
		Java 1.5 Concurrent package (java.util.concurrent) contains thread-safe collection classes that allow collections to be modified while iterating. By design iterator is fail-fast and throws ConcurrentModificationException. Some of these classes are CopyOnWriteArrayList, ConcurrentHashMap, CopyOnWriteArraySet.

Sorting
	The sort algorithm reorders a List so that its elements are in ascending order according to an ordering relationship. Two forms of the operation are provided. The simple form takes a List and sorts it according to its elements’ natural ordering. The second form of the sort takes a Comparator in addition to a List and sorts the elements with the Comparator.
	
	What Type of Sorting algorithm Java used?
		java.util.Arrays uses quicksort (actually dual pivot quicksort in the most recent version) for primitive types such as int and mergesort for objects that implement Comparable or use a Comparator.

	Why two algorithms 
		if a programmer’s using objects maybe space is not a critically important consideration and so the extra space used by mergesort maybe’s not a problem and if the programmer’s using primitive types maybe performance is the most important thing so we use the quicksort”,
		Quicksort is faster in both cases. Mergesort is stable in both cases.
		
Searching
	The binarySearch algorithm searches for a specified element in a sorted List. This algorithm has two forms. 
	The first takes a List and an element to search for (the “search key”). 
	This form assumes that the List is sorted in ascending order according to the natural ordering of its elements. 
	The second form takes a Comparator in addition to the List and the search key and assumes that the List is sorted into ascending order according to the specified Comparator. 
	The sort algorithm can be used to sort the List prior to calling binarySearch.

Composition
	The frequency and disjoint algorithms test some aspect of the composition of one or more Collections.
	frequency: counts the number of times the specified element occurs in the specified collection
	disjoint: determines whether two Collections are disjoint; that is, whether they contain no elements in common

Java 8 Collections API Features
	Java 8 biggest changes are related to Collection APIs. Some of the important changes and improvements are:
	Introduction of Stream API for sequential as well as parallel processing, you should read Java Stream API Tutorial for more details.
	Iterable interface has been extended with forEach() default method for iterating over a collection.
	Lambda Expression and Functional interfaces are mostly beneficial with Collection API classes.

Java 10 Collections API Changes
	List.copyOf, Set.copyOf, and Map.copyOf methods to create unmodifiable collections.
	Collectors class gets various methods for collecting unmodifiable collections (Set, List, Map). 
	These method names are toUnmodifiableList, toUnmodifiableSet, and toUnmodifiableMap.
	UnsupportedOperationException will be thrown if any element added from the list.

Java 11 Collections API Changes
	A new default method toArray(IntFunction<T[]> generator) added in the Collection interface. 
	This method returns an array containing all of the elements in this collection, using the provided generator function to allocate the returned array.

TCP-DUMP
	sudo tcpdump -i docker0 'port 8443' -w tcpdump1.pcap
	jcmd 25631 GC.heap_dump /tmp/heapdump.hprof
	jstack 27703 > /tmp/td.txt
Servlet-Tech
	Servlet technology is used to create a web application (resides at server side and generates a dynamic web page).
	Servlet technology is robust and scalable because of java language. Before Servlet, CGI (Common Gateway Interface) scripting language was common as a server-side programming language. 
























	