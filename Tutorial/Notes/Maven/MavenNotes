CMDs
{
	mvn clean
	mvn clean install 
	mvn -version
}

Installing Maven
{
	To install Maven on your own system (computer), go to the Maven download page and follow the instructions there. In summary, what you need to do is:
	
	Set the JAVA_HOME environment variable to point to a valid Java SDK (e.g. Java 8).
	Download and unzip Maven.
	Set the M2_HOME environment variable to point to the directory you unzipped Maven to.
	Set the M2 environment variable to point to M2_HOME/bin (%M2_HOME%\bin on Windows, $M2_HOME/bin on unix).
	Add M2 to the PATH environment variable (%M2% on Windows, $M2 on unix).
	Open a command prompt and type 'mvn -version' (without quotes) and press enter.
}

INFO
{
	Maven is centered around the concept of POM files (Project Object Model)
	

}

Maven vs. Ant
{
	Ant is another popular build tool by Apache. If you are used to Ant and you are trying to learn Maven, you will notice a difference in the approach of the two projects.
	Ant uses an imperative approach, meaning you specify in the Ant build file what actions Ant should take. You can specify low level actions like copying files, compiling code etc. You specify the actions, and you also specify the sequence in which they are carried out. Ant has no default directory layout.
	Maven uses a more declarative approach, meaning that you specify in the Maven POM file what to build, but not how to build it. The POM file describes your project resources - not how to build it. Contrarily, an Ant file describes how to build your project. In Maven, how to build your project is predefined in the Maven Build Life Cycles, Phases and Goals.
}

POM file
{
 	modelVersion:  element sets what version of the POM model you are using. 
 	groupId: element is a unique ID for an organization, or a project 
 	artifactId: element contains the name of the project you are building
 		The artifact ID is used as name for a subdirectory under the group ID directory in the Maven repository.
 		The artifact ID is also used as part of the name of the JAR file produced when building the project.
 	versionId : element contains the version number of the project. 
 	Effective POM
}
javadoc creation using maven
{
	https://www.mkyong.com/maven/generate-javadoc-jar-for-maven-based-project/
	
	<plugin>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-javadoc-plugin</artifactId>
			<executions>
				<execution>
					<id>attach-javadocs</id>
					<goals>
						<goal>jar</goal>
					</goals>
				</execution>
			</executions>
	</plugin>
	
	mvn install //deploy 
}

Note: Maven uses Java when executing, so you need Java installed too (and the JAVA_HOME environment variable set as explained above). Maven 3.0.5 needs a Java version 1.5 or later. I use Maven 3.3.3 with Java 8 (u45).
