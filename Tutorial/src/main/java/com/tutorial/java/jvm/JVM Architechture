JVM(Java Virtual Machine) acts as a run-time engine to run Java applications.
JVM is the one that actually calls the main method present in a java code.
JVM is a part of JRE(Java Runtime Environment).

When we compile a .java file, .class files(contains byte-code) with the same class names present in
.java file are generated by the Java compiler. This .class file goes into various steps when we run it.
These steps together describe the whole JVM.

Class Loader Subsystem
    It is mainly responsible for three activities.
    Loading
        The Class loader reads the .class file, generate the corresponding binary data and save it in method area.
        For each .class file, JVM stores following information in method area.
        Fully qualified name of the loaded class and its immediate parent class.
        Whether .class file is related to Class or Interface or Enum
        Modifier, Variables and Method information etc.
            After loading .class file, JVM creates an object of type Class to represent this file in the heap memory.
            Please note that this object is of type Class predefined in java.lang package.
            This Class object can be used by the programmer for getting class level information like name of class,
            parent name, methods and variable information etc. To get this object reference we can use getClass()
            method of Object class.
        Note : For every loaded .class file, only one object of Class is created.
    Linking
        Performs verification, preparation, and (optionally) resolution.
        Verification :
            It ensures the correctness of .class file i.e. it check whether this file is properly formatted and
            generated by valid compiler or not. If verification fails, we get run-time exception java.lang.VerifyError.
        Preparation :
            JVM allocates memory for class variables and initializing the memory to default values.
        Resolution :
            It is the process of replacing symbolic references from the type with direct references.
            It is done by searching into method area to locate the referenced entity.
    Initialization



Reference
    https://www.geeksforgeeks.org/jvm-works-jvm-architecture/