Java DataBase Connectivity API allows us to work with relational databases. JDBC API interfaces and classes are part of java.sql and javax.sql package.
allow loose coupling between our Java program and actual JDBC drivers
JDBC API uses Java Reflection API to achieve loose coupling between java programs and JDBC Drivers. 

--Maven Setup--
Dependencies
{
    <dependency>
        <groupId>mysql</groupId>
        <artifactId>mysql-connector-java</artifactId>
        <version>5.0.5</version>
    </dependency>

    <!-- You need to install ojdbc6 jar manually to your maven repository -->
    <dependency>
        <groupId>com.oracle</groupId>
        <artifactId>ojdbc6</artifactId>
        <version>11.2.0.1.0</version>
    </dependency>
}

application.properties
{
    #mysql DB properties
    #DB_DRIVER_CLASS=com.mysql.jdbc.Driver
    #DB_URL=jdbc:mysql://localhost:3306/UserDB
    #DB_USERNAME=pankaj
    #DB_PASSWORD=pankaj123

    #Oracle DB Properties
    DB_DRIVER_CLASS=oracle.jdbc.driver.OracleDriver
    DB_URL=jdbc:oracle:thin:@localhost:1571:MyDBSID
    DB_USERNAME=scott
    DB_PASSWORD=tiger
}

JDBC Example
{
    
    package com.journaldev.jdbc;

    import java.io.FileInputStream;
    import java.io.IOException;
    import java.sql.Connection;
    import java.sql.DriverManager;
    import java.sql.SQLException;
    import java.util.Properties;

    public class DBConnection {

        public static Connection getConnection() {
            Properties props = new Properties();
            FileInputStream fis = null;
            Connection con = null;
            try {
                fis = new FileInputStream("db.properties");
                props.load(fis);

                // load the Driver Class
                Class.forName(props.getProperty("DB_DRIVER_CLASS"));

                // create the connection now
                con = DriverManager.getConnection(props.getProperty("DB_URL"),
                        props.getProperty("DB_USERNAME"),
                        props.getProperty("DB_PASSWORD"));
            } catch (IOException | ClassNotFoundException | SQLException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
            return con;
        }
    }

}

first reason is that using reflection to create instance helps us in writing loosely-coupled code 
that we canâ€™t achieve if we are using new operator. 

JDBC Test
{
    package com.journaldev.jdbc;

    import java.sql.Connection;
    import java.sql.ResultSet;
    import java.sql.SQLException;
    import java.sql.Statement;

    public class DBConnectionTest {
        
        private static final String QUERY = "select id,name,email,country,password from Users";

        public static void main(String[] args) {
                    
            //using try-with-resources to avoid closing resources (boiler plate code)
            try(Connection con = DBConnection.getConnection();
                    Statement stmt = con.createStatement();
                    ResultSet rs = stmt.executeQuery(QUERY)) {	
                
                while(rs.next()){
                    int id = rs.getInt("id");
                    String name = rs.getString("name");
                    String email = rs.getString("email");
                    String country = rs.getString("country");
                    String password = rs.getString("password");
                    System.out.println(id + "," +name+ "," +email+ "," +country+ "," +password);
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
            
        }

    }
}

